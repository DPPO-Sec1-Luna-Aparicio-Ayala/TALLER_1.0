package Console;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import loader.Restaurante;
import loader.LoaderBurgers;
import loader.Restaurante;
import modelo.Combo;
import modelo.Ingrediente;
import modelo.ProductoMenu;


public class Aplicacion
{
	
	private  Restaurante calculadora;
	private Restaurante restaurante;

	public void ejecutarAplicacion()
	{
		System.out.println("Restaurante \n");

		boolean continuar = true;
		while (continuar)
		{
			try
			{
				mostrarMenuu();
				int opcion_seleccionada = Integer.parseInt(input("Por favor seleccione una opción"));
				if (opcion_seleccionada == 1)
					ejecutarCargarMenu();
				else if (opcion_seleccionada == 2 && calculadora != null)
					ejecutarIniciarNuevoPedido();
				else if (opcion_seleccionada == 3 && calculadora != null)
					ejecutarAdicionarAlPedido();
				else if (opcion_seleccionada == 4 && calculadora != null)
					ejecutarCerrarPedido();
				else if (opcion_seleccionada == 5 && calculadora != null)
					ejecutarConsultarPedido();
				else if (opcion_seleccionada == 6)
				{
					System.out.println("Saliendo de la aplicaciÃ³n ...");
					continuar = false;
				}
				else if (calculadora == null)
				{
					System.out.println("Para poder ejecutar esta opciÃ³n primero debe cargar un archivo de atletas.");
				}
				else
				{
					System.out.println("Por favor seleccione una opciÃ³n vÃ¡lida.");
				}
			}
			catch (NumberFormatException e)
			{
				System.out.println("Debe seleccionar uno de los nÃºmeros de las opciones.");
			}
		}
	}
	
	public void mostrarMenuu()
	{
		System.out.println("\nOpciones de la aplicaciÃ³n\n");
		System.out.println("1. Mostrar menú restaurante");
		System.out.println("2. Iniciar un nuevo pedido");
		System.out.println("3. Agregar un elemento a un pedido");
		System.out.println("4. Cerrar un pedido y guardar factura");
		System.out.println("5. Consultar la información de un pedido dado su ID");
		System.out.println("6. Salir de la aplicación"); 
	}
	
	

	private void ejecutarConsultarPedido() {
		// TODO Auto-generated method stub
		
	}

	private void ejecutarCerrarPedido() {
		// TODO Auto-generated method stub
		
	}

	private void ejecutarAdicionarAlPedido() {
		// TODO Auto-generated method stub
		
	}

	private void ejecutarIniciarNuevoPedido() {
		
		String opcion_seleccion = input("Introduzca los numeros de los alimentos que desee pedir y separelos con una coma (Ej: 1,4,6)");
		String [] partes = opcion_seleccion.split(",");
		ArrayList<Integer> pedido = new ArrayList<Integer>();
		for (String caracter: partes)
		{
			int num = Integer.parseInt(caracter);
			pedido.add(num);
		}
		Map<String, ProductoMenu> menu = restaurante.darMenu();
		for (int numero: pedido) {
			
			if (numero < menu.size()) {
			ProductoMenu dato = menu.get(numero);
			String nombre = dato.darPlato();
			double precio = dato.darPrecio();
			System.out.println(nombre + precio);
			}
		System.out.println("Que desea hacer a continuación? ");	
			
			
		}
		
	}

	/**
	 * Este método carga los archivos usando la clase Burgers y crea un objeto de tipo
	 * calculator para que sea usado por las otras opciones de la
	 * consola.
	 */
	private void ejecutarCargarMenu()
	{
		System.out.println("\n" + "Cargar la información de los archivos" + "\n");

		String archivo1 = "./data/combos.txt";
		String archivo2 = "./data/ingredientes.txt";
		String archivo3 = "./data/menu.txt";
		try
		{
			Restaurante restaurante = LoaderBurgers.cargarArchivo(archivo1, archivo2, archivo3);
			System.out.println("Se cargaron los archivos " + archivo1 + archivo2 + archivo3 + " con información del menú.");
			ArrayList<Combo> combos = restaurante.darCombos();
			
			System.out.println("\nCOMBOS");
			int n = 0;
			for (Combo comboActual: combos) {
				n ++;
				String nombre = comboActual.darNombreCombo();
				double precio = comboActual.darPrecio();
				System.out.println(n + ". " + nombre + " Precio: " + precio);
			}
				
			System.out.println("\nPRODUCTOS BÁSICOS");
			int w = 0;
			Map<String, ProductoMenu> menu = restaurante.darMenu();

			for (Map.Entry<String, ProductoMenu> entry : menu.entrySet()) {
				n ++;
				ProductoMenu productoActual = entry.getValue();
				String nombre = productoActual.darPlato();
				double precio = productoActual.darPrecio();
			    System.out.println(w + ". " + nombre + " Precio: " + precio);
			}
		

			
		}
		catch (FileNotFoundException e)
		{
			System.out.println("ERROR: el archivo indicado no se encontró.");
		}
		catch (IOException e)
		{
			System.out.println("ERROR: hubo un problema leyendo el archivo.");
			System.out.println(e.getMessage());
		}

	}

	private String input(String mensaje) {
		try
		{
			System.out.print(mensaje + ": ");
			BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
			return reader.readLine();
		}
		catch (IOException e)
		{
			System.out.println("Error leyendo de la consola");
			e.printStackTrace();
		}
		return null;
	}

	private void mostrarMenu() {
		// TODO Auto-generated method stub
	}
	
	public static void main(String[] args)
	
	{
		Aplicacion consola = new Aplicacion();
		consola.ejecutarAplicacion();
	}
}
		
	
